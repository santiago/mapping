{"ts":1348781607149,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1348781612389,"patch":[[{"diffs":[[1," \r\n//     Backbone.js 0.9.2\r\n\r\n//     (c) 2010-2012 Jeremy Ashkenas, DocumentCloud Inc.\r\n//     Backbone may be freely distributed under the MIT license.\r\n//     For all details and documentation:\r\n//     http://backbonejs.org\r\n\r\n(function(){\r\n\r\n  // Initial Setup\r\n  // -------------\r\n\r\n  // Save a reference to the global object (`window` in the browser, `global`\r\n  // on the server).\r\n  var root = this;\r\n\r\n  // Save the previous value of the `Backbone` variable, so that it can be\r\n  // restored later on, if `noConflict` is used.\r\n  var previousBackbone = root.Backbone;\r\n\r\n  // Create a local reference to slice/splice.\r\n  var slice = Array.prototype.slice;\r\n  var splice = Array.prototype.splice;\r\n\r\n  // The top-level namespace. All public Backbone classes and modules will\r\n  // be attached to this. Exported for both CommonJS and the browser.\r\n  var Backbone;\r\n  if (typeof exports !== 'undefined') {\r\n    Backbone = exports;\r\n  } else {\r\n    Backbone = root.Backbone = {};\r\n  }\r\n\r\n  // Current version of the library. Keep in sync with `package.json`.\r\n  Backbone.VERSION = '0.9.2';\r\n\r\n  // Require Underscore, if we're on the server, and it's not already present.\r\n  var _ = root._;\r\n  if (!_ && (typeof require !== 'undefined')) _ = require('underscore');\r\n\r\n  // For Backbone's purposes, jQuery, Zepto, or Ender owns the `$` variable.\r\n  var $ = root.jQuery || root.Zepto || root.ender;\r\n\r\n  // Set the JavaScript library that will be used for DOM manipulation and\r\n  // Ajax calls (a.k.a. the `$` variable). By default Backbone will use: jQuery,\r\n  // Zepto, or Ender; but the `setDomLibrary()` method lets you inject an\r\n  // alternate JavaScript library (or a mock library for testing your views\r\n  // outside of a browser).\r\n  Backbone.setDomLibrary = function(lib) {\r\n    $ = lib;\r\n  };\r\n\r\n  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable\r\n  // to its previous owner. Returns a reference to this Backbone object.\r\n  Backbone.noConflict = function() {\r\n    root.Backbone = previousBackbone;\r\n    return this;\r\n  };\r\n\r\n  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option\r\n  // will fake `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and\r\n  // set a `X-Http-Method-Override` header.\r\n  Backbone.emulateHTTP = false;\r\n\r\n  // Turn on `emulateJSON` to support legacy servers that can't deal with direct\r\n  // `application/json` requests ... will encode the body as\r\n  // `application/x-www-form-urlencoded` instead and will send the model in a\r\n  // form param named `model`.\r\n  Backbone.emulateJSON = false;\r\n\r\n  // Backbone.Events\r\n  // -----------------\r\n\r\n  // Regular expression used to split event strings\r\n  var eventSplitter = /\\s+/;\r\n\r\n  // A module that can be mixed in to *any object* in order to provide it with\r\n  // custom events. You may bind with `on` or remove with `off` callback functions\r\n  // to an event; trigger`-ing an event fires all callbacks in succession.\r\n  //\r\n  //     var object = {};\r\n  //     _.extend(object, Backbone.Events);\r\n  //     object.on('expand', function(){ alert('expanded'); });\r\n  //     object.trigger('expand');\r\n  //\r\n  var Events = Backbone.Events = {\r\n\r\n    // Bind one or more space separated events, `events`, to a `callback`\r\n    // function. Passing `\"all\"` will bind the callback to all events fired.\r\n    on: function(events, callback, context) {\r\n\r\n      var calls, event, node, tail, list;\r\n      if (!callback) return this;\r\n      events = events.split(eventSplitter);\r\n      calls = this._callbacks || (this._callbacks = {});\r\n\r\n      // Create an immutable callback list, allowing traversal during\r\n      // modification.  The tail is an empty object that will always be used\r\n      // as the next node.\r\n      while (event = events.shift()) {\r\n        list = calls[event];\r\n        node = list ? list.tail : {};\r\n        node.next = tail = {};\r\n        node.context = context;\r\n        node.callback = callback;\r\n        calls[event] = {tail: tail, next: list ? list.next : node};\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Remove one or many callbacks. If `context` is null, removes all callbacks\r\n    // with that function. If `callback` is null, removes all callbacks for the\r\n    // event. If `events` is null, removes all bound callbacks for all events.\r\n    off: function(events, callback, context) {\r\n      var event, calls, node, tail, cb, ctx;\r\n\r\n      // No events, or removing *all* events.\r\n      if (!(calls = this._callbacks)) return;\r\n      if (!(events || callback || context)) {\r\n        delete this._callbacks;\r\n        return this;\r\n      }\r\n\r\n      // Loop through the listed events and contexts, splicing them out of the\r\n      // linked list of callbacks if appropriate.\r\n      events = events ? events.split(eventSplitter) : _.keys(calls);\r\n      while (event = events.shift()) {\r\n        node = calls[event];\r\n        delete calls[event];\r\n        if (!node || !(callback || context)) continue;\r\n        // Create a new list, omitting the indicated callbacks.\r\n        tail = node.tail;\r\n        while ((node = node.next) !== tail) {\r\n          cb = node.callback;\r\n          ctx = node.context;\r\n          if ((callback && cb !== callback) || (context && ctx !== context)) {\r\n            this.on(event, cb, ctx);\r\n          }\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Trigger one or many events, firing all bound callbacks. Callbacks are\r\n    // passed the same arguments as `trigger` is, apart from the event name\r\n    // (unless you're listening on `\"all\"`, which will cause your callback to\r\n    // receive the true name of the event as the first argument).\r\n    trigger: function(events) {\r\n      var event, node, calls, tail, args, all, rest;\r\n      if (!(calls = this._callbacks)) return this;\r\n      all = calls.all;\r\n      events = events.split(eventSplitter);\r\n      rest = slice.call(arguments, 1);\r\n\r\n      // For each event, walk through the linked list of callbacks twice,\r\n      // first to trigger the event, then to trigger any `\"all\"` callbacks.\r\n      while (event = events.shift()) {\r\n        if (node = calls[event]) {\r\n          tail = node.tail;\r\n          while ((node = node.next) !== tail) {\r\n            node.callback.apply(node.context || this, rest);\r\n          }\r\n        }\r\n        if (node = all) {\r\n          tail = node.tail;\r\n          args = [event].concat(rest);\r\n          while ((node = node.next) !== tail) {\r\n            node.callback.apply(node.context || this, args);\r\n          }\r\n        }\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n  };\r\n\r\n  // Aliases for backwards compatibility.\r\n  Events.bind   = Events.on;\r\n  Events.unbind = Events.off;\r\n\r\n  // Backbone.Model\r\n  // --------------\r\n\r\n  // Create a new model, with defined attributes. A client id (`cid`)\r\n  // is automatically generated and assigned for you.\r\n  var Model = Backbone.Model = function(attributes, options) {\r\n    var defaults;\r\n    attributes || (attributes = {});\r\n    if (options && options.parse) attributes = this.parse(attributes);\r\n    if (defaults = getValue(this, 'defaults')) {\r\n      attributes = _.extend({}, defaults, attributes);\r\n    }\r\n    if (options && options.collection) this.collection = options.collection;\r\n    this.attributes = {};\r\n    this._escapedAttributes = {};\r\n    this.cid = _.uniqueId('c');\r\n    this.changed = {};\r\n    this._silent = {};\r\n    this._pending = {};\r\n    this.set(attributes, {silent: true});\r\n    // Reset change tracking.\r\n    this.changed = {};\r\n    this._silent = {};\r\n    this._pending = {};\r\n    this._previousAttributes = _.clone(this.attributes);\r\n    this.initialize.apply(this, arguments);\r\n  };\r\n\r\n  // Attach all inheritable methods to the Model prototype.\r\n  _.extend(Model.prototype, Events, {\r\n\r\n    // A hash of attributes whose current and previous value differ.\r\n    changed: null,\r\n\r\n    // A hash of attributes that have silently changed since the last time\r\n    // `change` was called.  Will become pending attributes on the next call.\r\n    _silent: null,\r\n\r\n    // A hash of attributes that have changed since the last `'change'` event\r\n    // began.\r\n    _pending: null,\r\n\r\n    // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\r\n    // CouchDB users may want to set this to `\"_id\"`.\r\n    idAttribute: 'id',\r\n\r\n    // Initialize is an empty function by default. Override it with your own\r\n    // initialization logic.\r\n    initialize: function(){},\r\n\r\n    // Return a copy of the model's `attributes` object.\r\n    toJSON: function(options) {\r\n      return _.clone(this.attributes);\r\n    },\r\n\r\n    // Get the value of an attribute.\r\n    get: function(attr) {\r\n      return this.attributes[attr];\r\n    },\r\n\r\n    // Get the HTML-escaped value of an attribute.\r\n    escape: function(attr) {\r\n      var html;\r\n      if (html = this._escapedAttributes[attr]) return html;\r\n      var val = this.get(attr);\r\n      return this._escapedAttributes[attr] = _.escape(val == null ? '' : '' + val);\r\n    },\r\n\r\n    // Returns `true` if the attribute contains a value that is not null\r\n    // or undefined.\r\n    has: function(attr) {\r\n      return this.get(attr) != null;\r\n    },\r\n\r\n    // Set a hash of model attributes on the object, firing `\"change\"` unless\r\n    // you choose to silence it.\r\n    set: function(key, value, options) {\r\n      var attrs, attr, val;\r\n\r\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\r\n      if (_.isObject(key) || key == null) {\r\n        attrs = key;\r\n        options = value;\r\n      } else {\r\n        attrs = {};\r\n        attrs[key] = value;\r\n      }\r\n\r\n      // Extract attributes and options.\r\n      options || (options = {});\r\n      if (!attrs) return this;\r\n      if (attrs instanceof Model) attrs = attrs.attributes;\r\n      if (options.unset) for (attr in attrs) attrs[attr] = void 0;\r\n\r\n      // Run validation.\r\n      if (!this._validate(attrs, options)) return false;\r\n\r\n      // Check for changes of `id`.\r\n      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];\r\n\r\n      var changes = options.changes = {};\r\n      var now = this.attributes;\r\n      var escaped = this._escapedAttributes;\r\n      var prev = this._previousAttributes || {};\r\n\r\n      // For each `set` attribute...\r\n      for (attr in attrs) {\r\n        val = attrs[attr];\r\n\r\n        // If the new and current value differ, record the change.\r\n        if (!_.isEqual(now[attr], val) || (options.unset && _.has(now, attr))) {\r\n          delete escaped[attr];\r\n          (options.silent ? this._silent : changes)[attr] = true;\r\n        }\r\n\r\n        // Update or delete the current value.\r\n        options.unset ? delete now[attr] : now[attr] = val;\r\n\r\n        // If the new and previous value differ, record the change.  If not,\r\n        // then remove changes for this attribute.\r\n        if (!_.isEqual(prev[attr], val) || (_.has(now, attr) != _.has(prev, attr))) {\r\n          this.changed[attr] = val;\r\n          if (!options.silent) this._pending[attr] = true;\r\n        } else {\r\n          delete this.changed[attr];\r\n          delete this._pending[attr];\r\n        }\r\n      }\r\n\r\n      // Fire the `\"change\"` events.\r\n      if (!options.silent) this.change(options);\r\n      return this;\r\n    },\r\n\r\n    // Remove an attribute from the model, firing `\"change\"` unless you choose\r\n    // to silence it. `unset` is a noop if the attribute doesn't exist.\r\n    unset: function(attr, options) {\r\n      (options || (options = {})).unset = true;\r\n      return this.set(attr, null, options);\r\n    },\r\n\r\n    // Clear all attributes on the model, firing `\"change\"` unless you choose\r\n    // to silence it.\r\n    clear: function(options) {\r\n      (options || (options = {})).unset = true;\r\n      return this.set(_.clone(this.attributes), options);\r\n    },\r\n\r\n    // Fetch the model from the server. If the server's representation of the\r\n    // model differs from its current attributes, they will be overriden,\r\n    // triggering a `\"change\"` event.\r\n    fetch: function(options) {\r\n      options = options ? _.clone(options) : {};\r\n      var model = this;\r\n      var success = options.success;\r\n      options.success = function(resp, status, xhr) {\r\n        if (!model.set(model.parse(resp, xhr), options)) return false;\r\n        if (success) success(model, resp);\r\n      };\r\n      options.error = Backbone.wrapError(options.error, model, options);\r\n      return (this.sync || Backbone.sync).call(this, 'read', this, options);\r\n    },\r\n\r\n    // Set a hash of model attributes, and sync the model to the server.\r\n    // If the server returns an attributes hash that differs, the model's\r\n    // state will be `set` again.\r\n    save: function(key, value, options) {\r\n      var attrs, current;\r\n\r\n      // Handle both `(\"key\", value)` and `({key: value})` -style calls.\r\n      if (_.isObject(key) || key == null) {\r\n        attrs = key;\r\n        options = value;\r\n      } else {\r\n        attrs = {};\r\n        attrs[key] = value;\r\n      }\r\n      options = options ? _.clone(options) : {};\r\n\r\n      // If we're \"wait\"-ing to set changed attributes, validate early.\r\n      if (options.wait) {\r\n        if (!this._validate(attrs, options)) return false;\r\n        current = _.clone(this.attributes);\r\n      }\r\n\r\n      // Regular saves `set` attributes before persisting to the server.\r\n      var silentOptions = _.extend({}, options, {silent: true});\r\n      if (attrs && !this.set(attrs, options.wait ? silentOptions : options)) {\r\n        return false;\r\n      }\r\n\r\n      // After a successful server-side save, the client is (optionally)\r\n      // updated with the server-side state.\r\n      var model = this;\r\n      var success = options.success;\r\n      options.success = function(resp, status, xhr) {\r\n        var serverAttrs = model.parse(resp, xhr);\r\n        if (options.wait) {\r\n          delete options.wait;\r\n          serverAttrs = _.extend(attrs || {}, serverAttrs);\r\n        }\r\n        if (!model.set(serverAttrs, options)) return false;\r\n        if (success) {\r\n          success(model, resp);\r\n        } else {\r\n          model.trigger('sync', model, resp, options);\r\n        }\r\n      };\r\n\r\n      // Finish configuring and sending the Ajax request.\r\n      options.error = Backbone.wrapError(options.error, model, options);\r\n      var method = this.isNew() ? 'create' : 'update';\r\n      var xhr = (this.sync || Backbone.sync).call(this, method, this, options);\r\n      if (options.wait) this.set(current, silentOptions);\r\n      return xhr;\r\n    },\r\n\r\n    // Destroy this model on the server if it was already persisted.\r\n    // Optimistically removes the model from its collection, if it has one.\r\n    // If `wait: true` is passed, waits for the server to respond before removal.\r\n    destroy: function(options) {\r\n      options = options ? _.clone(options) : {};\r\n      var model = this;\r\n      var success = options.success;\r\n\r\n      var triggerDestroy = function() {\r\n        model.trigger('destroy', model, model.collection, options);\r\n      };\r\n\r\n      if (this.isNew()) {\r\n        triggerDestroy();\r\n        return false;\r\n      }\r\n\r\n      options.success = function(resp) {\r\n        if (options.wait) triggerDestroy();\r\n        if (success) {\r\n          success(model, resp);\r\n        } else {\r\n          model.trigger('sync', model, resp, options);\r\n        }\r\n      };\r\n\r\n      options.error = Backbone.wrapError(options.error, model, options);\r\n      var xhr = (this.sync || Backbone.sync).call(this, 'delete', this, options);\r\n      if (!options.wait) triggerDestroy();\r\n      return xhr;\r\n    },\r\n\r\n    // Default URL for the model's representation on the server -- if you're\r\n    // using Backbone's restful methods, override this to change the endpoint\r\n    // that will be called.\r\n    url: function() {\r\n      var base = getValue(this, 'urlRoot') || getValue(this.collection, 'url') || urlError();\r\n      if (this.isNew()) return base;\r\n      return base + (base.charAt(base.length - 1) == '/' ? '' : '/') + encodeURIComponent(this.id);\r\n    },\r\n\r\n    // **parse** converts a response into the hash of attributes to be `set` on\r\n    // the model. The default implementation is just to pass the response along.\r\n    parse: function(resp, xhr) {\r\n      return resp;\r\n    },\r\n\r\n    // Create a new model with identical attributes to this one.\r\n    clone: function() {\r\n      return new this.constructor(this.attributes);\r\n    },\r\n\r\n    // A model is new if it has never been saved to the server, and lacks an id.\r\n    isNew: function() {\r\n      return this.id == null;\r\n    },\r\n\r\n    // Call this method to manually fire a `\"change\"` event for this model and\r\n    // a `\"change:attribute\"` event for each changed attribute.\r\n    // Calling this will cause all objects observing the model to update.\r\n    change: function(options) {\r\n      options || (options = {});\r\n      var changing = this._changing;\r\n      this._changing = true;\r\n\r\n      // Silent changes become pending changes.\r\n      for (var attr in this._silent) this._pending[attr] = true;\r\n\r\n      // Silent changes are triggered.\r\n      var changes = _.extend({}, options.changes, this._silent);\r\n      this._silent = {};\r\n      for (var attr in changes) {\r\n        this.trigger('change:' + attr, this, this.get(attr), options);\r\n      }\r\n      if (changing) return this;\r\n\r\n      // Continue firing `\"change\"` events while there are pending changes.\r\n      while (!_.isEmpty(this._pending)) {\r\n        this._pending = {};\r\n        this.trigger('change', this, options);\r\n        // Pending and silent changes still remain.\r\n        for (var attr in this.changed) {\r\n          if (this._pending[attr] || this._silent[attr]) continue;\r\n          delete this.changed[attr];\r\n        }\r\n        this._previousAttributes = _.clone(this.attributes);\r\n      }\r\n\r\n      this._changing = false;\r\n      return this;\r\n    },\r\n\r\n    // Determine if the model has changed since the last `\"change\"` event.\r\n    // If you specify an attribute name, determine if that attribute has changed.\r\n    hasChanged: function(attr) {\r\n      if (!arguments.length) return !_.isEmpty(this.changed);\r\n      return _.has(this.changed, attr);\r\n    },\r\n\r\n    // Return an object containing all the attributes that have changed, or\r\n    // false if there are no changed attributes. Useful for determining what\r\n    // parts of a view need to be updated and/or what attributes need to be\r\n    // persisted to the server. Unset attributes will be set to undefined.\r\n    // You can also pass an attributes object to diff against the model,\r\n    // determining if there *would be* a change.\r\n    changedAttributes: function(diff) {\r\n      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;\r\n      var val, changed = false, old = this._previousAttributes;\r\n      for (var attr in diff) {\r\n        if (_.isEqual(old[attr], (val = diff[attr]))) continue;\r\n        (changed || (changed = {}))[attr] = val;\r\n      }\r\n      return changed;\r\n    },\r\n\r\n    // Get the previous value of an attribute, recorded at the time the last\r\n    // `\"change\"` event was fired.\r\n    previous: function(attr) {\r\n      if (!arguments.length || !this._previousAttributes) return null;\r\n      return this._previousAttributes[attr];\r\n    },\r\n\r\n    // Get all of the attributes of the model at the time of the previous\r\n    // `\"change\"` event.\r\n    previousAttributes: function() {\r\n      return _.clone(this._previousAttributes);\r\n    },\r\n\r\n    // Check if the model is currently in a valid state. It's only possible to\r\n    // get into an *invalid* state if you're using silent changes.\r\n    isValid: function() {\r\n      return !this.validate(this.attributes);\r\n    },\r\n\r\n    // Run validation against the next complete set of model attributes,\r\n    // returning `true` if all is well. If a specific `error` callback has\r\n    // been passed, call that instead of firing the general `\"error\"` event.\r\n    _validate: function(attrs, options) {\r\n      if (options.silent || !this.validate) return true;\r\n      attrs = _.extend({}, this.attributes, attrs);\r\n      var error = this.validate(attrs, options);\r\n      if (!error) return true;\r\n      if (options && options.error) {\r\n        options.error(this, error, options);\r\n      } else {\r\n        this.trigger('error', this, error, options);\r\n      }\r\n      return false;\r\n    }\r\n\r\n  });\r\n\r\n  // Backbone.Collection\r\n  // -------------------\r\n\r\n  // Provides a standard collection class for our sets of models, ordered\r\n  // or unordered. If a `comparator` is specified, the Collection will maintain\r\n  // its models in sort order, as they're added and removed.\r\n  var Collection = Backbone.Collection = function(models, options) {\r\n    options || (options = {});\r\n    if (options.model) this.model = options.model;\r\n    if (options.comparator) this.comparator = options.comparator;\r\n    this._reset();\r\n    this.initialize.apply(this, arguments);\r\n    if (models) this.reset(models, {silent: true, parse: options.parse});\r\n  };\r\n\r\n  // Define the Collection's inheritable methods.\r\n  _.extend(Collection.prototype, Events, {\r\n\r\n    // The default model for a collection is just a **Backbone.Model**.\r\n    // This should be overridden in most cases.\r\n    model: Model,\r\n\r\n    // Initialize is an empty function by default. Override it with your own\r\n    // initialization logic.\r\n    initialize: function(){},\r\n\r\n    // The JSON representation of a Collection is an array of the\r\n    // models' attributes.\r\n    toJSON: function(options) {\r\n      return this.map(function(model){ return model.toJSON(options); });\r\n    },\r\n\r\n    // Add a model, or list of models to the set. Pass **silent** to avoid\r\n    // firing the `add` event for every new model.\r\n    add: function(models, options) {\r\n      var i, index, length, model, cid, id, cids = {}, ids = {}, dups = [];\r\n      options || (options = {});\r\n      models = _.isArray(models) ? models.slice() : [models];\r\n\r\n      // Begin by turning bare objects into model references, and preventing\r\n      // invalid models or duplicate models from being added.\r\n      for (i = 0, length = models.length; i < length; i++) {\r\n        if (!(model = models[i] = this._prepareModel(models[i], options))) {\r\n          throw new Error(\"Can't add an invalid model to a collection\");\r\n        }\r\n        cid = model.cid;\r\n        id = model.id;\r\n        if (cids[cid] || this._byCid[cid] || ((id != null) && (ids[id] || this._byId[id]))) {\r\n          dups.push(i);\r\n          continue;\r\n        }\r\n        cids[cid] = ids[id] = model;\r\n      }\r\n\r\n      // Remove duplicates.\r\n      i = dups.length;\r\n      while (i--) {\r\n        models.splice(dups[i], 1);\r\n      }\r\n\r\n      // Listen to added models' events, and index models for lookup by\r\n      // `id` and by `cid`.\r\n      for (i = 0, length = models.length; i < length; i++) {\r\n        (model = models[i]).on('all', this._onModelEvent, this);\r\n        this._byCid[model.cid] = model;\r\n        if (model.id != null) this._byId[model.id] = model;\r\n      }\r\n\r\n      // Insert models into the collection, re-sorting if needed, and triggering\r\n      // `add` events unless silenced.\r\n      this.length += length;\r\n      index = options.at != null ? options.at : this.models.length;\r\n      splice.apply(this.models, [index, 0].concat(models));\r\n      if (this.comparator) this.sort({silent: true});\r\n      if (options.silent) return this;\r\n      for (i = 0, length = this.models.length; i < length; i++) {\r\n        if (!cids[(model = this.models[i]).cid]) continue;\r\n        options.index = i;\r\n        model.trigger('add', model, this, options);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    // Remove a model, or a list of models from the set. Pass silent to avoid\r\n    // firing the `remove` event for every model removed.\r\n    remove: function(models, options) {\r\n      var i, l, index, model;\r\n      options || (options = {});\r\n      models = _.isArray(models) ? models.slice() : [models];\r\n      for (i = 0, l = models.length; i < l; i++) {\r\n        model = this.getByCid(models[i]) || this.get(models[i]);\r\n        if (!model) continue;\r\n        delete this._byId[model.id];\r\n        delete this._byCid[model.cid];\r\n        index = this.indexOf(model);\r\n        this.models.splice(index, 1);\r\n        this.length--;\r\n        if (!options.silent) {\r\n          options.index = index;\r\n          model.trigger('remove', model, this, options);\r\n        }\r\n        this._removeReference(model);\r\n      }\r\n      return this;\r\n    },\r\n\r\n    // Add a model to the end of the collection.\r\n    push: function(model, options) {\r\n      model = this._prepareModel(model, options);\r\n      this.add(model, options);\r\n      return model;\r\n    },\r\n\r\n    // Remove a model from the end of the collection.\r\n    pop: function(options) {\r\n      var model = this.at(this.length - 1);\r\n      this.remove(model, options);\r\n      return model;\r\n    },\r\n\r\n    // Add a model to the beginning of the collection.\r\n    unshift: function(model, options) {\r\n      model = this._prepareModel(model, options);\r\n      this.add(model, _.extend({at: 0}, options));\r\n      return model;\r\n    },\r\n\r\n    // Remove a model from the beginning of the collection.\r\n    shift: function(options) {\r\n      var model = this.at(0);\r\n      this.remove(model, options);\r\n      return model;\r\n    },\r\n\r\n    // Get a model from the set by id.\r\n    get: function(id) {\r\n      if (id == null) return void 0;\r\n      return this._byId[id.id != null ? id.id : id];\r\n    },\r\n\r\n    // Get a model from the set by client id.\r\n    getByCid: function(cid) {\r\n      return cid && this._byCid[cid.cid || cid];\r\n    },\r\n\r\n    // Get the model at the given index.\r\n    at: function(index) {\r\n      return this.models[index];\r\n    },\r\n\r\n    // Return models with matching attributes. Useful for simple cases of `filter`.\r\n    where: function(attrs) {\r\n      if (_.isEmpty(attrs)) return [];\r\n      return this.filter(function(model) {\r\n        for (var key in attrs) {\r\n          if (attrs[key] !== model.get(key)) return false;\r\n        }\r\n        return true;\r\n      });\r\n    },\r\n\r\n    // Force the collection to re-sort itself. You don't need to call this under\r\n    // normal circumstances, as the set will maintain sort order as each item\r\n    // is added.\r\n    sort: function(options) {\r\n      options || (options = {});\r\n      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');\r\n      var boundComparator = _.bind(this.comparator, this);\r\n      if (this.comparator.length == 1) {\r\n        this.models = this.sortBy(boundComparator);\r\n      } else {\r\n        this.models.sort(boundComparator);\r\n      }\r\n      if (!options.silent) this.trigger('reset', this, options);\r\n      return this;\r\n    },\r\n\r\n    // Pluck an attribute from each model in the collection.\r\n    pluck: function(attr) {\r\n      return _.map(this.models, function(model){ return model.get(attr); });\r\n    },\r\n\r\n    // When you have more items than you want to add or remove individually,\r\n    // you can reset the entire set with a new list of models, without firing\r\n    // any `add` or `remove` events. Fires `reset` when finished.\r\n    reset: function(models, options) {\r\n      models  || (models = []);\r\n      options || (options = {});\r\n      for (var i = 0, l = this.models.length; i < l; i++) {\r\n        this._removeReference(this.models[i]);\r\n      }\r\n      this._reset();\r\n      this.add(models, _.extend({silent: true}, options));\r\n      if (!options.silent) this.trigger('reset', this, options);\r\n      return this;\r\n    },\r\n\r\n    // Fetch the default set of models for this collection, resetting the\r\n    // collection when they arrive. If `add: true` is passed, appends the\r\n    // models to the collection instead of resetting.\r\n    fetch: function(options) {\r\n      options = options ? _.clone(options) : {};\r\n      if (options.parse === undefined) options.parse = true;\r\n      var collection = this;\r\n      var success = options.success;\r\n      options.success = function(resp, status, xhr) {\r\n        collection[options.add ? 'add' : 'reset'](collection.parse(resp, xhr), options);\r\n        if (success) success(collection, resp);\r\n      };\r\n      options.error = Backbone.wrapError(options.error, collection, options);\r\n      return (this.sync || Backbone.sync).call(this, 'read', this, options);\r\n    },\r\n\r\n    // Create a new instance of a model in this collection. Add the model to the\r\n    // collection immediately, unless `wait: true` is passed, in which case we\r\n    // wait for the server to agree.\r\n    create: function(model, options) {\r\n      var coll = this;\r\n      options = options ? _.clone(options) : {};\r\n      model = this._prepareModel(model, options);\r\n      if (!model) return false;\r\n      if (!options.wait) coll.add(model, options);\r\n      var success = options.success;\r\n      options.success = function(nextModel, resp, xhr) {\r\n        if (options.wait) coll.add(nextModel, options);\r\n        if (success) {\r\n          success(nextModel, resp);\r\n        } else {\r\n          nextModel.trigger('sync', model, resp, options);\r\n        }\r\n      };\r\n      model.save(null, options);\r\n      return model;\r\n    },\r\n\r\n    // **parse** converts a response into a list of models to be added to the\r\n    // collection. The default implementation is just to pass it through.\r\n    parse: function(resp, xhr) {\r\n      return resp;\r\n    },\r\n\r\n    // Proxy to _'s chain. Can't be proxied the same way the rest of the\r\n    // underscore methods are proxied because it relies on the underscore\r\n    // constructor.\r\n    chain: function () {\r\n      return _(this.models).chain();\r\n    },\r\n\r\n    // Reset all internal state. Called when the collection is reset.\r\n    _reset: function(options) {\r\n      this.length = 0;\r\n      this.models = [];\r\n      this._byId  = {};\r\n      this._byCid = {};\r\n    },\r\n\r\n    // Prepare a model or hash of attributes to be added to this collection.\r\n    _prepareModel: function(model, options) {\r\n      options || (options = {});\r\n      if (!(model instanceof Model)) {\r\n        var attrs = model;\r\n        options.collection = this;\r\n        model = new this.model(attrs, options);\r\n        if (!model._validate(model.attributes, options)) model = false;\r\n      } else if (!model.collection) {\r\n        model.collection = this;\r\n      }\r\n      return model;\r\n    },\r\n\r\n    // Internal method to remove a model's ties to a collection.\r\n    _removeReference: function(model) {\r\n      if (this == model.collection) {\r\n        delete model.collection;\r\n      }\r\n      model.off('all', this._onModelEvent, this);\r\n    },\r\n\r\n    // Internal method called every time a model in the set fires an event.\r\n    // Sets need to update their indexes when models change ids. All other\r\n    // events simply proxy through. \"add\" and \"remove\" events that originate\r\n    // in other collections are ignored.\r\n    _onModelEvent: function(event, model, collection, options) {\r\n      if ((event == 'add' || event == 'remove') && collection != this) return;\r\n      if (event == 'destroy') {\r\n        this.remove(model, options);\r\n      }\r\n      if (model && event === 'change:' + model.idAttribute) {\r\n        delete this._byId[model.previous(model.idAttribute)];\r\n        this._byId[model.id] = model;\r\n      }\r\n      this.trigger.apply(this, arguments);\r\n    }\r\n\r\n  });\r\n\r\n  // Underscore methods that we want to implement on the Collection.\r\n  var methods = ['forEach', 'each', 'map', 'reduce', 'reduceRight', 'find',\r\n    'detect', 'filter', 'select', 'reject', 'every', 'all', 'some', 'any',\r\n    'include', 'contains', 'invoke', 'max', 'min', 'sortBy', 'sortedIndex',\r\n    'toArray', 'size', 'first', 'initial', 'rest', 'last', 'without', 'indexOf',\r\n    'shuffle', 'lastIndexOf', 'isEmpty', 'groupBy'];\r\n\r\n  // Mix in each Underscore method as a proxy to `Collection#models`.\r\n  _.each(methods, function(method) {\r\n    Collection.prototype[method] = function() {\r\n      return _[method].apply(_, [this.models].concat(_.toArray(arguments)));\r\n    };\r\n  });\r\n\r\n  // Backbone.Router\r\n  // -------------------\r\n\r\n  // Routers map faux-URLs to actions, and fire events when routes are\r\n  // matched. Creating a new one sets its `routes` hash, if not set statically.\r\n  var Router = Backbone.Router = function(options) {\r\n    options || (options = {});\r\n    if (options.routes) this.routes = options.routes;\r\n    this._bindRoutes();\r\n    this.initialize.apply(this, arguments);\r\n  };\r\n\r\n  // Cached regular expressions for matching named param parts and splatted\r\n  // parts of route strings.\r\n  var namedParam    = /:\\w+/g;\r\n  var splatParam    = /\\*\\w+/g;\r\n  var escapeRegExp  = /[-[\\]{}()+?.,\\\\^$|#\\s]/g;\r\n\r\n  // Set up all inheritable **Backbone.Router** properties and methods.\r\n  _.extend(Router.prototype, Events, {\r\n\r\n    // Initialize is an empty function by default. Override it with your own\r\n    // initialization logic.\r\n    initialize: function(){},\r\n\r\n    // Manually bind a single named route to a callback. For example:\r\n    //\r\n    //     this.route('search/:query/p:num', 'search', function(query, num) {\r\n    //       ...\r\n    //     });\r\n    //\r\n    route: function(route, name, callback) {\r\n      Backbone.history || (Backbone.history = new History);\r\n      if (!_.isRegExp(route)) route = this._routeToRegExp(route);\r\n      if (!callback) callback = this[name];\r\n      Backbone.history.route(route, _.bind(function(fragment) {\r\n        var args = this._extractParameters(route, fragment);\r\n        callback && callback.apply(this, args);\r\n        this.trigger.apply(this, ['route:' + name].concat(args));\r\n        Backbone.history.trigger('route', this, name, args);\r\n      }, this));\r\n      return this;\r\n    },\r\n\r\n    // Simple proxy to `Backbone.history` to save a fragment into the history.\r\n    navigate: function(fragment, options) {\r\n      Backbone.history.navigate(fragment, options);\r\n    },\r\n\r\n    // Bind all defined routes to `Backbone.history`. We have to reverse the\r\n    // order of the routes here to support behavior where the most general\r\n    // routes can be defined at the bottom of the route map.\r\n    _bindRoutes: function() {\r\n      if (!this.routes) return;\r\n      var routes = [];\r\n      for (var route in this.routes) {\r\n        routes.unshift([route, this.routes[route]]);\r\n      }\r\n      for (var i = 0, l = routes.length; i < l; i++) {\r\n        this.route(routes[i][0], routes[i][1], this[routes[i][1]]);\r\n      }\r\n    },\r\n\r\n    // Convert a route string into a regular expression, suitable for matching\r\n    // against the current location hash.\r\n    _routeToRegExp: function(route) {\r\n      route = route.replace(escapeRegExp, '\\\\$&')\r\n                   .replace(namedParam, '([^\\/]+)')\r\n                   .replace(splatParam, '(.*?)');\r\n      return new RegExp('^' + route + '$');\r\n    },\r\n\r\n    // Given a route, and a URL fragment that it matches, return the array of\r\n    // extracted parameters.\r\n    _extractParameters: function(route, fragment) {\r\n      return route.exec(fragment).slice(1);\r\n    }\r\n\r\n  });\r\n\r\n  // Backbone.History\r\n  // ----------------\r\n\r\n  // Handles cross-browser history management, based on URL fragments. If the\r\n  // browser does not support `onhashchange`, falls back to polling.\r\n  var History = Backbone.History = function() {\r\n    this.handlers = [];\r\n    _.bindAll(this, 'checkUrl');\r\n  };\r\n\r\n  // Cached regex for cleaning leading hashes and slashes .\r\n  var routeStripper = /^[#\\/]/;\r\n\r\n  // Cached regex for detecting MSIE.\r\n  var isExplorer = /msie [\\w.]+/;\r\n\r\n  // Has the history handling already been started?\r\n  History.started = false;\r\n\r\n  // Set up all inheritable **Backbone.History** properties and methods.\r\n  _.extend(History.prototype, Events, {\r\n\r\n    // The default interval to poll for hash changes, if necessary, is\r\n    // twenty times a second.\r\n    interval: 50,\r\n\r\n    // Gets the true hash value. Cannot use location.hash directly due to bug\r\n    // in Firefox where location.hash will always be decoded.\r\n    getHash: function(windowOverride) {\r\n      var loc = windowOverride ? windowOverride.location : window.location;\r\n      var match = loc.href.match(/#(.*)$/);\r\n      return match ? match[1] : '';\r\n    },\r\n\r\n    // Get the cross-browser normalized URL fragment, either from the URL,\r\n    // the hash, or the override.\r\n    getFragment: function(fragment, forcePushState) {\r\n      if (fragment == null) {\r\n        if (this._hasPushState || forcePushState) {\r\n          fragment = window.location.pathname;\r\n          var search = window.location.search;\r\n          if (search) fragment += search;\r\n        } else {\r\n          fragment = this.getHash();\r\n        }\r\n      }\r\n      if (!fragment.indexOf(this.options.root)) fragment = fragment.substr(this.options.root.length);\r\n      return fragment.replace(routeStripper, '');\r\n    },\r\n\r\n    // Start the hash change handling, returning `true` if the current URL matches\r\n    // an existing route, and `false` otherwise.\r\n    start: function(options) {\r\n      if (History.started) throw new Error(\"Backbone.history has already been started\");\r\n      History.started = true;\r\n\r\n      // Figure out the initial configuration. Do we need an iframe?\r\n      // Is pushState desired ... is it available?\r\n      this.options          = _.extend({}, {root: '/'}, this.options, options);\r\n      this._wantsHashChange = this.options.hashChange !== false;\r\n      this._wantsPushState  = !!this.options.pushState;\r\n      this._hasPushState    = !!(this.options.pushState && window.history && window.history.pushState);\r\n      var fragment          = this.getFragment();\r\n      var docMode           = document.documentMode;\r\n      var oldIE             = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));\r\n\r\n      if (oldIE) {\r\n        this.iframe = $('<iframe src=\"javascript:0\" tabindex=\"-1\" />').hide().appendTo('body')[0].contentWindow;\r\n        this.navigate(fragment);\r\n      }\r\n\r\n      // Depending on whether we're using pushState or hashes, and whether\r\n      // 'onhashchange' is supported, determine how we check the URL state.\r\n      if (this._hasPushState) {\r\n        $(window).bind('popstate', this.checkUrl);\r\n      } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {\r\n        $(window).bind('hashchange', this.checkUrl);\r\n      } else if (this._wantsHashChange) {\r\n        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);\r\n      }\r\n\r\n      // Determine if we need to change the base url, for a pushState link\r\n      // opened by a non-pushState browser.\r\n      this.fragment = fragment;\r\n      var loc = window.location;\r\n      var atRoot  = loc.pathname == this.options.root;\r\n\r\n      // If we've started off with a route from a `pushState`-enabled browser,\r\n      // but we're currently in a browser that doesn't support it...\r\n      if (this._wantsHashChange && this._wantsPushState && !this._hasPushState && !atRoot) {\r\n        this.fragment = this.getFragment(null, true);\r\n        window.location.replace(this.options.root + '#' + this.fragment);\r\n        // Return immediately as browser will do redirect to new url\r\n        return true;\r\n\r\n      // Or if we've started out with a hash-based route, but we're currently\r\n      // in a browser where it could be `pushState`-based instead...\r\n      } else if (this._wantsPushState && this._hasPushState && atRoot && loc.hash) {\r\n        this.fragment = this.getHash().replace(routeStripper, '');\r\n        window.history.replaceState({}, document.title, loc.protocol + '//' + loc.host + this.options.root + this.fragment);\r\n      }\r\n\r\n      if (!this.options.silent) {\r\n        return this.loadUrl();\r\n      }\r\n    },\r\n\r\n    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,\r\n    // but possibly useful for unit testing Routers.\r\n    stop: function() {\r\n      $(window).unbind('popstate', this.checkUrl).unbind('hashchange', this.checkUrl);\r\n      clearInterval(this._checkUrlInterval);\r\n      History.started = false;\r\n    },\r\n\r\n    // Add a route to be tested when the fragment changes. Routes added later\r\n    // may override previous routes.\r\n    route: function(route, callback) {\r\n      this.handlers.unshift({route: route, callback: callback});\r\n    },\r\n\r\n    // Checks the current URL to see if it has changed, and if it has,\r\n    // calls `loadUrl`, normalizing across the hidden iframe.\r\n    checkUrl: function(e) {\r\n      var current = this.getFragment();\r\n      if (current == this.fragment && this.iframe) current = this.getFragment(this.getHash(this.iframe));\r\n      if (current == this.fragment) return false;\r\n      if (this.iframe) this.navigate(current);\r\n      this.loadUrl() || this.loadUrl(this.getHash());\r\n    },\r\n\r\n    // Attempt to load the current URL fragment. If a route succeeds with a\r\n    // match, returns `true`. If no defined routes matches the fragment,\r\n    // returns `false`.\r\n    loadUrl: function(fragmentOverride) {\r\n      var fragment = this.fragment = this.getFragment(fragmentOverride);\r\n      var matched = _.any(this.handlers, function(handler) {\r\n        if (handler.route.test(fragment)) {\r\n          handler.callback(fragment);\r\n          return true;\r\n        }\r\n      });\r\n      return matched;\r\n    },\r\n\r\n    // Save a fragment into the hash history, or replace the URL state if the\r\n    // 'replace' option is passed. You are responsible for properly URL-encoding\r\n    // the fragment in advance.\r\n    //\r\n    // The options object can contain `trigger: true` if you wish to have the\r\n    // route callback be fired (not usually desirable), or `replace: true`, if\r\n    // you wish to modify the current URL without adding an entry to the history.\r\n    navigate: function(fragment, options) {\r\n      if (!History.started) return false;\r\n      if (!options || options === true) options = {trigger: options};\r\n      var frag = (fragment || '').replace(routeStripper, '');\r\n      if (this.fragment == frag) return;\r\n\r\n      // If pushState is available, we use it to set the fragment as a real URL.\r\n      if (this._hasPushState) {\r\n        if (frag.indexOf(this.options.root) != 0) frag = this.options.root + frag;\r\n        this.fragment = frag;\r\n        window.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, frag);\r\n\r\n      // If hash changes haven't been explicitly disabled, update the hash\r\n      // fragment to store history.\r\n      } else if (this._wantsHashChange) {\r\n        this.fragment = frag;\r\n        this._updateHash(window.location, frag, options.replace);\r\n        if (this.iframe && (frag != this.getFragment(this.getHash(this.iframe)))) {\r\n          // Opening and closing the iframe tricks IE7 and earlier to push a history entry on hash-tag change.\r\n          // When replace is true, we don't want this.\r\n          if(!options.replace) this.iframe.document.open().close();\r\n          this._updateHash(this.iframe.location, frag, options.replace);\r\n        }\r\n\r\n      // If you've told us that you explicitly don't want fallback hashchange-\r\n      // based history, then `navigate` becomes a page refresh.\r\n      } else {\r\n        window.location.assign(this.options.root + fragment);\r\n      }\r\n      if (options.trigger) this.loadUrl(fragment);\r\n    },\r\n\r\n    // Update the hash location, either replacing the current entry, or adding\r\n    // a new one to the browser history.\r\n    _updateHash: function(location, fragment, replace) {\r\n      if (replace) {\r\n        location.replace(location.toString().replace(/(javascript:|#).*$/, '') + '#' + fragment);\r\n      } else {\r\n        location.hash = fragment;\r\n      }\r\n    }\r\n  });\r\n\r\n  // Backbone.View\r\n  // -------------\r\n\r\n  // Creating a Backbone.View creates its initial element outside of the DOM,\r\n  // if an existing element is not provided...\r\n  var View = Backbone.View = function(options) {\r\n    this.cid = _.uniqueId('view');\r\n    this._configure(options || {});\r\n    this._ensureElement();\r\n    this.initialize.apply(this, arguments);\r\n    this.delegateEvents();\r\n  };\r\n\r\n  // Cached regex to split keys for `delegate`.\r\n  var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\r\n\r\n  // List of view options to be merged as properties.\r\n  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName'];\r\n\r\n  // Set up all inheritable **Backbone.View** properties and methods.\r\n  _.extend(View.prototype, Events, {\r\n\r\n    // The default `tagName` of a View's element is `\"div\"`.\r\n    tagName: 'div',\r\n\r\n    // jQuery delegate for element lookup, scoped to DOM elements within the\r\n    // current view. This should be prefered to global lookups where possible.\r\n    $: function(selector) {\r\n      return this.$el.find(selector);\r\n    },\r\n\r\n    // Initialize is an empty function by default. Override it with your own\r\n    // initialization logic.\r\n    initialize: function(){},\r\n\r\n    // **render** is the core function that your view should override, in order\r\n    // to populate its element (`this.el`), with the appropriate HTML. The\r\n    // convention is for **render** to always return `this`.\r\n    render: function() {\r\n      return this;\r\n    },\r\n\r\n    // Remove this view from the DOM. Note that the view isn't present in the\r\n    // DOM by default, so calling this method may be a no-op.\r\n    remove: function() {\r\n      this.$el.remove();\r\n      return this;\r\n    },\r\n\r\n    // For small amounts of DOM Elements, where a full-blown template isn't\r\n    // needed, use **make** to manufacture elements, one at a time.\r\n    //\r\n    //     var el = this.make('li', {'class': 'row'}, this.model.escape('title'));\r\n    //\r\n    make: function(tagName, attributes, content) {\r\n      var el = document.createElement(tagName);\r\n      if (attributes) $(el).attr(attributes);\r\n      if (content) $(el).html(content);\r\n      return el;\r\n    },\r\n\r\n    // Change the view's element (`this.el` property), including event\r\n    // re-delegation.\r\n    setElement: function(element, delegate) {\r\n      if (this.$el) this.undelegateEvents();\r\n      this.$el = (element instanceof $) ? element : $(element);\r\n      this.el = this.$el[0];\r\n      if (delegate !== false) this.delegateEvents();\r\n      return this;\r\n    },\r\n\r\n    // Set callbacks, where `this.events` is a hash of\r\n    //\r\n    // *{\"event selector\": \"callback\"}*\r\n    //\r\n    //     {\r\n    //       'mousedown .title':  'edit',\r\n    //       'click .button':     'save'\r\n    //       'click .open':       function(e) { ... }\r\n    //     }\r\n    //\r\n    // pairs. Callbacks will be bound to the view, with `this` set properly.\r\n    // Uses event delegation for efficiency.\r\n    // Omitting the selector binds the event to `this.el`.\r\n    // This only works for delegate-able events: not `focus`, `blur`, and\r\n    // not `change`, `submit`, and `reset` in Internet Explorer.\r\n    delegateEvents: function(events) {\r\n      if (!(events || (events = getValue(this, 'events')))) return;\r\n      this.undelegateEvents();\r\n      for (var key in events) {\r\n        var method = events[key];\r\n        if (!_.isFunction(method)) method = this[events[key]];\r\n        if (!method) throw new Error('Method \"' + events[key] + '\" does not exist');\r\n        var match = key.match(delegateEventSplitter);\r\n        var eventName = match[1], selector = match[2];\r\n        method = _.bind(method, this);\r\n        eventName += '.delegateEvents' + this.cid;\r\n        if (selector === '') {\r\n          this.$el.bind(eventName, method);\r\n        } else {\r\n          this.$el.delegate(selector, eventName, method);\r\n        }\r\n      }\r\n    },\r\n\r\n    // Clears all callbacks previously bound to the view with `delegateEvents`.\r\n    // You usually don't need to use this, but may wish to if you have multiple\r\n    // Backbone views attached to the same DOM element.\r\n    undelegateEvents: function() {\r\n      this.$el.unbind('.delegateEvents' + this.cid);\r\n    },\r\n\r\n    // Performs the initial configuration of a View with a set of options.\r\n    // Keys with special meaning *(model, collection, id, className)*, are\r\n    // attached directly to the view.\r\n    _configure: function(options) {\r\n      if (this.options) options = _.extend({}, this.options, options);\r\n      for (var i = 0, l = viewOptions.length; i < l; i++) {\r\n        var attr = viewOptions[i];\r\n        if (options[attr]) this[attr] = options[attr];\r\n      }\r\n      this.options = options;\r\n    },\r\n\r\n    // Ensure that the View has a DOM element to render into.\r\n    // If `this.el` is a string, pass it through `$()`, take the first\r\n    // matching element, and re-assign it to `el`. Otherwise, create\r\n    // an element from the `id`, `className` and `tagName` properties.\r\n    _ensureElement: function() {\r\n      if (!this.el) {\r\n        var attrs = getValue(this, 'attributes') || {};\r\n        if (this.id) attrs.id = this.id;\r\n        if (this.className) attrs['class'] = this.className;\r\n        this.setElement(this.make(this.tagName, attrs), false);\r\n      } else {\r\n        this.setElement(this.el, false);\r\n      }\r\n    }\r\n\r\n  });\r\n\r\n  // The self-propagating extend function that Backbone classes use.\r\n  var extend = function (protoProps, classProps) {\r\n    var child = inherits(this, protoProps, classProps);\r\n    child.extend = this.extend;\r\n    return child;\r\n  };\r\n\r\n  // Set up inheritance for the model, collection, and view.\r\n  Model.extend = Collection.extend = Router.extend = View.extend = extend;\r\n\r\n  // Backbone.sync\r\n  // -------------\r\n\r\n  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\r\n  var methodMap = {\r\n    'create': 'POST',\r\n    'update': 'PUT',\r\n    'delete': 'DELETE',\r\n    'read':   'GET'\r\n  };\r\n\r\n  // Override this function to change the manner in which Backbone persists\r\n  // models to the server. You will be passed the type of request, and the\r\n  // model in question. By default, makes a RESTful Ajax request\r\n  // to the model's `url()`. Some possible customizations could be:\r\n  //\r\n  // * Use `setTimeout` to batch rapid-fire updates into a single request.\r\n  // * Send up the models as XML instead of JSON.\r\n  // * Persist models via WebSockets instead of Ajax.\r\n  //\r\n  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests\r\n  // as `POST`, with a `_method` parameter containing the true HTTP method,\r\n  // as well as all requests with the body as `application/x-www-form-urlencoded`\r\n  // instead of `application/json` with the model in a param named `model`.\r\n  // Useful when interfacing with server-side languages like **PHP** that make\r\n  // it difficult to read the body of `PUT` requests.\r\n  Backbone.sync = function(method, model, options) {\r\n    var type = methodMap[method];\r\n\r\n    // Default options, unless specified.\r\n    options || (options = {});\r\n\r\n    // Default JSON-request options.\r\n    var params = {type: type, dataType: 'json'};\r\n\r\n    // Ensure that we have a URL.\r\n    if (!options.url) {\r\n      params.url = getValue(model, 'url') || urlError();\r\n    }\r\n\r\n    // Ensure that we have the appropriate request data.\r\n    if (!options.data && model && (method == 'create' || method == 'update')) {\r\n      params.contentType = 'application/json';\r\n      params.data = JSON.stringify(model.toJSON());\r\n    }\r\n\r\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\r\n    if (Backbone.emulateJSON) {\r\n      params.contentType = 'application/x-www-form-urlencoded';\r\n      params.data = params.data ? {model: params.data} : {};\r\n    }\r\n\r\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\r\n    // And an `X-HTTP-Method-Override` header.\r\n    if (Backbone.emulateHTTP) {\r\n      if (type === 'PUT' || type === 'DELETE') {\r\n        if (Backbone.emulateJSON) params.data._method = type;\r\n        params.type = 'POST';\r\n        params.beforeSend = function(xhr) {\r\n          xhr.setRequestHeader('X-HTTP-Method-Override', type);\r\n        };\r\n      }\r\n    }\r\n\r\n    // Don't process data on a non-GET request.\r\n    if (params.type !== 'GET' && !Backbone.emulateJSON) {\r\n      params.processData = false;\r\n    }\r\n\r\n    // Make the request, allowing the user to override any Ajax options.\r\n    return $.ajax(_.extend(params, options));\r\n  };\r\n\r\n  // Wrap an optional error callback with a fallback error event.\r\n  Backbone.wrapError = function(onError, originalModel, options) {\r\n    return function(model, resp) {\r\n      resp = model === originalModel ? resp : model;\r\n      if (onError) {\r\n        onError(originalModel, resp, options);\r\n      } else {\r\n        originalModel.trigger('error', originalModel, resp, options);\r\n      }\r\n    };\r\n  };\r\n\r\n  // Helpers\r\n  // -------\r\n\r\n  // Shared empty constructor function to aid in prototype-chain creation.\r\n  var ctor = function(){};\r\n\r\n  // Helper function to correctly set up the prototype chain, for subclasses.\r\n  // Similar to `goog.inherits`, but uses a hash of prototype properties and\r\n  // class properties to be extended.\r\n  var inherits = function(parent, protoProps, staticProps) {\r\n    var child;\r\n\r\n    // The constructor function for the new subclass is either defined by you\r\n    // (the \"constructor\" property in your `extend` definition), or defaulted\r\n    // by us to simply call the parent's constructor.\r\n    if (protoProps && protoProps.hasOwnProperty('constructor')) {\r\n      child = protoProps.constructor;\r\n    } else {\r\n      child = function(){ parent.apply(this, arguments); };\r\n    }\r\n\r\n    // Inherit class (static) properties from parent.\r\n    _.extend(child, parent);\r\n\r\n    // Set the prototype chain to inherit from `parent`, without calling\r\n    // `parent`'s constructor function.\r\n    ctor.prototype = parent.prototype;\r\n    child.prototype = new ctor();\r\n\r\n    // Add prototype properties (instance properties) to the subclass,\r\n    // if supplied.\r\n    if (protoProps) _.extend(child.prototype, protoProps);\r\n\r\n    // Add static properties to the constructor function, if supplied.\r\n    if (staticProps) _.extend(child, staticProps);\r\n\r\n    // Correctly set child's `prototype.constructor`.\r\n    child.prototype.constructor = child;\r\n\r\n    // Set a convenience property in case the parent's prototype is needed later.\r\n    child.__super__ = parent.prototype;\r\n\r\n    return child;\r\n  };\r\n\r\n  // Helper function to get a value from a Backbone object as a property\r\n  // or as a function.\r\n  var getValue = function(object, prop) {\r\n    if (!(object && object[prop])) return null;\r\n    return _.isFunction(object[prop]) ? object[prop]() : object[prop];\r\n  };\r\n\r\n  // Throw an error when a URL is needed, and none is supplied.\r\n  var urlError = function() {\r\n    throw new Error('A \"url\" property or function must be specified');\r\n  };\r\n\r\n}).call(this);"]],"start1":0,"start2":0,"length1":0,"length2":54587}]],"length":54587,"saved":false}
